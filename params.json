{"name":"PinnedHeader ListView","tagline":"A ListView with pinned section headers for Android","body":"PinnedHeaderListView\r\n================\r\n\r\nThis library provides a sectioned ListView with pinned headers. It looks and feels much like the default contacts app does on Android 4.0 and above\r\n\r\nA custom adapter is provided which must be extended and used with the custom ListView.\r\n\r\nThe usage of this library is simple. You need to create an adapter that extends SectionedBaseAdapter.\r\n\r\nThere are 6 methods that need to be overridden:\r\n\r\n* ```public Object getItem(int section, int position);```\r\n* ```public long getItemId(int section, int position);```\r\n* ```public int getSectionCount();```\r\n* ```public int getCountForSection(int section);```\r\n* ```public View getItemView(int section, int position, View convertView, ViewGroup parent);```\r\n* ```public View getSectionHeaderView(int section, View convertView, ViewGroup parent);```\r\n\r\n```getItemView``` and ```getSectionHeaderView``` should be treated as you would the ```getItemView``` method from a normal Adapter.\r\nThe same goes for ```getItem``` and ```getItemId```.\r\n\r\n```getSectionCount``` and ```getCountForSection ```replace the ```getCount()``` method from a standard adapter.\r\nYou should return the number of sections in your list in ```getSectionCount``` and the number of items in a section in ```getCountForSection```.\r\n\r\nIn addition to these methods, there are a few others you may override:\r\n\r\n* ```public int getItemViewType(int section, int position);```\r\n* ```public int getItemViewTypeCount();```\r\n* ```public int getSectionHeaderViewType(int section);```\r\n* ```public int getSectionHeaderViewTypeCount();```\r\n\r\nThese replace the ```getViewTypeCount() and getItemViewType(int position)``` methods from a standard adapter\r\n\r\nNote that you can return the same ItemViewType for a header and a non header and these will be cached seperately by the underlying ListView.  \r\nThat is, you will never get a header view passed in as the convertView in ```public View getItemView(int section, int position, View convertView, ViewGroup parent);```,\r\nnor will you get an item view passed in as the convertView in ```public View getSectionHeaderView(int section, View convertView, ViewGroup parent);```\r\n\r\nSee the provided example for more details.\r\n\r\nLicense\r\n-------\r\nCopyright (c) 2012, James Smith  \r\nAll rights reserved.  \r\n\r\nRedistribution and use in source and binary forms, with or without\r\nmodification, are permitted provided that the following conditions are met:  \r\n* Redistributions of source code must retain the above copyright\r\n  notice, this list of conditions and the following disclaimer.  \r\n* Redistributions in binary form must reproduce the above copyright\r\n  notice, this list of conditions and the following disclaimer in the\r\n  documentation and/or other materials provided with the distribution.  \r\n* Neither the name of the <organization> nor the\r\n  names of its contributors may be used to endorse or promote products\r\n  derived from this software without specific prior written permission.  \r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\nDISCLAIMED. IN NO EVENT SHALL James Smith BE LIABLE FOR ANY\r\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}